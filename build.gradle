import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.+'
    }
}


apply plugin: 'com.android.application'

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
}

android {
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs = []
            jniLibs.srcDir 'libs'
        }

        androidTest.setRoot('tests')
    }

    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 21
        versionCode 17
        versionName "0.17"
        
        // Not used since we use Android.mk.
        // Left here for documentation.
        ndk {
          moduleName "xtrs"
          ldLibs 'llog', 'lOpenSLES'

          File jniDir = file('./jni')
          jniDir = file(jniDir.absolutePath)
          cFlags '-march=armv7-a -I' + jniDir + ' -I' + jniDir + '/SDL -DDISKDIR="." -DANDROID -D__WORDSIZE=32'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), \
            'proguard-rules.txt'
        }
    }
    lintOptions {
        abortOnError false
    }

    productFlavors {
        arm {
            ndk {
                abiFilters "armeabi"
            }
        }
    }
}

task ndkBuild(type: Exec) {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def ndkDir = properties.getProperty('ndk.dir')
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine ndkDir + '\\ndk-build.cmd', '-C', file('jni').absolutePath
        } else {
            commandLine ndkDir + '/ndk-build', '-C', file('jni').absolutePath
        }
    } else {
        print "Could not read 'local.properties'."
    }
}

   tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

dependencies {
    compile 'com.android.support:appcompat-v7:21+'
    compile 'com.android.support:mediarouter-v7:21+'
    compile 'com.google.android.gms:play-services:6.5.+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

clean{
    delete "obj"
    delete "libs/armeabi"
}

// To create a gradle wrapper.
task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
