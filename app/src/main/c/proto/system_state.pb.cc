// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_state.proto

#include "system_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NativeSystemState_Registers::NativeSystemState_Registers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ix_)*/0
  , /*decltype(_impl_.iy_)*/0
  , /*decltype(_impl_.pc_)*/0
  , /*decltype(_impl_.sp_)*/0
  , /*decltype(_impl_.af_)*/0
  , /*decltype(_impl_.bc_)*/0
  , /*decltype(_impl_.de_)*/0
  , /*decltype(_impl_.hl_)*/0
  , /*decltype(_impl_.af_prime_)*/0
  , /*decltype(_impl_.bc_prime_)*/0
  , /*decltype(_impl_.de_prime_)*/0
  , /*decltype(_impl_.hl_prime_)*/0
  , /*decltype(_impl_.i_)*/0
  , /*decltype(_impl_.r_1_)*/0
  , /*decltype(_impl_.r_2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NativeSystemState_RegistersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NativeSystemState_RegistersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NativeSystemState_RegistersDefaultTypeInternal() {}
  union {
    NativeSystemState_Registers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NativeSystemState_RegistersDefaultTypeInternal _NativeSystemState_Registers_default_instance_;
PROTOBUF_CONSTEXPR NativeSystemState_MemoryRegion::NativeSystemState_MemoryRegion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NativeSystemState_MemoryRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NativeSystemState_MemoryRegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NativeSystemState_MemoryRegionDefaultTypeInternal() {}
  union {
    NativeSystemState_MemoryRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NativeSystemState_MemoryRegionDefaultTypeInternal _NativeSystemState_MemoryRegion_default_instance_;
PROTOBUF_CONSTEXPR NativeSystemState::NativeSystemState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memoryregions_)*/{}
  , /*decltype(_impl_.registers_)*/nullptr
  , /*decltype(_impl_.model_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NativeSystemStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NativeSystemStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NativeSystemStateDefaultTypeInternal() {}
  union {
    NativeSystemState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NativeSystemStateDefaultTypeInternal _NativeSystemState_default_instance_;
bool Trs80Model_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Trs80Model_strings[5] = {};

static const char Trs80Model_names[] =
  "MODEL_4"
  "MODEL_4P"
  "MODEL_I"
  "MODEL_III"
  "UNKNOWN_MODEL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Trs80Model_entries[] = {
  { {Trs80Model_names + 0, 7}, 3 },
  { {Trs80Model_names + 7, 8}, 4 },
  { {Trs80Model_names + 15, 7}, 1 },
  { {Trs80Model_names + 22, 9}, 2 },
  { {Trs80Model_names + 31, 13}, 0 },
};

static const int Trs80Model_entries_by_number[] = {
  4, // 0 -> UNKNOWN_MODEL
  2, // 1 -> MODEL_I
  3, // 2 -> MODEL_III
  0, // 3 -> MODEL_4
  1, // 4 -> MODEL_4P
};

const std::string& Trs80Model_Name(
    Trs80Model value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Trs80Model_entries,
          Trs80Model_entries_by_number,
          5, Trs80Model_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Trs80Model_entries,
      Trs80Model_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Trs80Model_strings[idx].get();
}
bool Trs80Model_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Trs80Model* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Trs80Model_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Trs80Model>(int_value);
  }
  return success;
}

// ===================================================================

class NativeSystemState_Registers::_Internal {
 public:
};

NativeSystemState_Registers::NativeSystemState_Registers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NativeSystemState.Registers)
}
NativeSystemState_Registers::NativeSystemState_Registers(const NativeSystemState_Registers& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NativeSystemState_Registers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ix_){}
    , decltype(_impl_.iy_){}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.sp_){}
    , decltype(_impl_.af_){}
    , decltype(_impl_.bc_){}
    , decltype(_impl_.de_){}
    , decltype(_impl_.hl_){}
    , decltype(_impl_.af_prime_){}
    , decltype(_impl_.bc_prime_){}
    , decltype(_impl_.de_prime_){}
    , decltype(_impl_.hl_prime_){}
    , decltype(_impl_.i_){}
    , decltype(_impl_.r_1_){}
    , decltype(_impl_.r_2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.ix_, &from._impl_.ix_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.r_2_) -
    reinterpret_cast<char*>(&_impl_.ix_)) + sizeof(_impl_.r_2_));
  // @@protoc_insertion_point(copy_constructor:NativeSystemState.Registers)
}

inline void NativeSystemState_Registers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ix_){0}
    , decltype(_impl_.iy_){0}
    , decltype(_impl_.pc_){0}
    , decltype(_impl_.sp_){0}
    , decltype(_impl_.af_){0}
    , decltype(_impl_.bc_){0}
    , decltype(_impl_.de_){0}
    , decltype(_impl_.hl_){0}
    , decltype(_impl_.af_prime_){0}
    , decltype(_impl_.bc_prime_){0}
    , decltype(_impl_.de_prime_){0}
    , decltype(_impl_.hl_prime_){0}
    , decltype(_impl_.i_){0}
    , decltype(_impl_.r_1_){0}
    , decltype(_impl_.r_2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NativeSystemState_Registers::~NativeSystemState_Registers() {
  // @@protoc_insertion_point(destructor:NativeSystemState.Registers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NativeSystemState_Registers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NativeSystemState_Registers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NativeSystemState_Registers::Clear() {
// @@protoc_insertion_point(message_clear_start:NativeSystemState.Registers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.r_2_) -
      reinterpret_cast<char*>(&_impl_.ix_)) + sizeof(_impl_.r_2_));
  _internal_metadata_.Clear<std::string>();
}

const char* NativeSystemState_Registers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 iy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.iy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 af = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.af_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 de = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.de_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.hl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 af_prime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.af_prime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bc_prime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.bc_prime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 de_prime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.de_prime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hl_prime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.hl_prime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 i = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 r_1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.r_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 r_2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.r_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NativeSystemState_Registers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NativeSystemState.Registers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ix = 1;
  if (this->_internal_ix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ix(), target);
  }

  // int32 iy = 2;
  if (this->_internal_iy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_iy(), target);
  }

  // int32 pc = 3;
  if (this->_internal_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pc(), target);
  }

  // int32 sp = 4;
  if (this->_internal_sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sp(), target);
  }

  // int32 af = 5;
  if (this->_internal_af() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_af(), target);
  }

  // int32 bc = 6;
  if (this->_internal_bc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bc(), target);
  }

  // int32 de = 7;
  if (this->_internal_de() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_de(), target);
  }

  // int32 hl = 8;
  if (this->_internal_hl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_hl(), target);
  }

  // int32 af_prime = 9;
  if (this->_internal_af_prime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_af_prime(), target);
  }

  // int32 bc_prime = 10;
  if (this->_internal_bc_prime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_bc_prime(), target);
  }

  // int32 de_prime = 11;
  if (this->_internal_de_prime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_de_prime(), target);
  }

  // int32 hl_prime = 12;
  if (this->_internal_hl_prime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_hl_prime(), target);
  }

  // int32 i = 13;
  if (this->_internal_i() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_i(), target);
  }

  // int32 r_1 = 14;
  if (this->_internal_r_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_r_1(), target);
  }

  // int32 r_2 = 15;
  if (this->_internal_r_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_r_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NativeSystemState.Registers)
  return target;
}

size_t NativeSystemState_Registers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NativeSystemState.Registers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ix = 1;
  if (this->_internal_ix() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ix());
  }

  // int32 iy = 2;
  if (this->_internal_iy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iy());
  }

  // int32 pc = 3;
  if (this->_internal_pc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pc());
  }

  // int32 sp = 4;
  if (this->_internal_sp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sp());
  }

  // int32 af = 5;
  if (this->_internal_af() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_af());
  }

  // int32 bc = 6;
  if (this->_internal_bc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bc());
  }

  // int32 de = 7;
  if (this->_internal_de() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_de());
  }

  // int32 hl = 8;
  if (this->_internal_hl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hl());
  }

  // int32 af_prime = 9;
  if (this->_internal_af_prime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_af_prime());
  }

  // int32 bc_prime = 10;
  if (this->_internal_bc_prime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bc_prime());
  }

  // int32 de_prime = 11;
  if (this->_internal_de_prime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_de_prime());
  }

  // int32 hl_prime = 12;
  if (this->_internal_hl_prime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hl_prime());
  }

  // int32 i = 13;
  if (this->_internal_i() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
  }

  // int32 r_1 = 14;
  if (this->_internal_r_1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r_1());
  }

  // int32 r_2 = 15;
  if (this->_internal_r_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r_2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NativeSystemState_Registers::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NativeSystemState_Registers*>(
      &from));
}

void NativeSystemState_Registers::MergeFrom(const NativeSystemState_Registers& from) {
  NativeSystemState_Registers* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:NativeSystemState.Registers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ix() != 0) {
    _this->_internal_set_ix(from._internal_ix());
  }
  if (from._internal_iy() != 0) {
    _this->_internal_set_iy(from._internal_iy());
  }
  if (from._internal_pc() != 0) {
    _this->_internal_set_pc(from._internal_pc());
  }
  if (from._internal_sp() != 0) {
    _this->_internal_set_sp(from._internal_sp());
  }
  if (from._internal_af() != 0) {
    _this->_internal_set_af(from._internal_af());
  }
  if (from._internal_bc() != 0) {
    _this->_internal_set_bc(from._internal_bc());
  }
  if (from._internal_de() != 0) {
    _this->_internal_set_de(from._internal_de());
  }
  if (from._internal_hl() != 0) {
    _this->_internal_set_hl(from._internal_hl());
  }
  if (from._internal_af_prime() != 0) {
    _this->_internal_set_af_prime(from._internal_af_prime());
  }
  if (from._internal_bc_prime() != 0) {
    _this->_internal_set_bc_prime(from._internal_bc_prime());
  }
  if (from._internal_de_prime() != 0) {
    _this->_internal_set_de_prime(from._internal_de_prime());
  }
  if (from._internal_hl_prime() != 0) {
    _this->_internal_set_hl_prime(from._internal_hl_prime());
  }
  if (from._internal_i() != 0) {
    _this->_internal_set_i(from._internal_i());
  }
  if (from._internal_r_1() != 0) {
    _this->_internal_set_r_1(from._internal_r_1());
  }
  if (from._internal_r_2() != 0) {
    _this->_internal_set_r_2(from._internal_r_2());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NativeSystemState_Registers::CopyFrom(const NativeSystemState_Registers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NativeSystemState.Registers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeSystemState_Registers::IsInitialized() const {
  return true;
}

void NativeSystemState_Registers::InternalSwap(NativeSystemState_Registers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NativeSystemState_Registers, _impl_.r_2_)
      + sizeof(NativeSystemState_Registers::_impl_.r_2_)
      - PROTOBUF_FIELD_OFFSET(NativeSystemState_Registers, _impl_.ix_)>(
          reinterpret_cast<char*>(&_impl_.ix_),
          reinterpret_cast<char*>(&other->_impl_.ix_));
}

std::string NativeSystemState_Registers::GetTypeName() const {
  return "NativeSystemState.Registers";
}


// ===================================================================

class NativeSystemState_MemoryRegion::_Internal {
 public:
};

NativeSystemState_MemoryRegion::NativeSystemState_MemoryRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NativeSystemState.MemoryRegion)
}
NativeSystemState_MemoryRegion::NativeSystemState_MemoryRegion(const NativeSystemState_MemoryRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NativeSystemState_MemoryRegion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.start_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.start_ = from._impl_.start_;
  // @@protoc_insertion_point(copy_constructor:NativeSystemState.MemoryRegion)
}

inline void NativeSystemState_MemoryRegion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.start_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NativeSystemState_MemoryRegion::~NativeSystemState_MemoryRegion() {
  // @@protoc_insertion_point(destructor:NativeSystemState.MemoryRegion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NativeSystemState_MemoryRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void NativeSystemState_MemoryRegion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NativeSystemState_MemoryRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:NativeSystemState.MemoryRegion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.start_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* NativeSystemState_MemoryRegion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NativeSystemState_MemoryRegion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NativeSystemState.MemoryRegion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NativeSystemState.MemoryRegion)
  return target;
}

size_t NativeSystemState_MemoryRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NativeSystemState.MemoryRegion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NativeSystemState_MemoryRegion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NativeSystemState_MemoryRegion*>(
      &from));
}

void NativeSystemState_MemoryRegion::MergeFrom(const NativeSystemState_MemoryRegion& from) {
  NativeSystemState_MemoryRegion* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:NativeSystemState.MemoryRegion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NativeSystemState_MemoryRegion::CopyFrom(const NativeSystemState_MemoryRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NativeSystemState.MemoryRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeSystemState_MemoryRegion::IsInitialized() const {
  return true;
}

void NativeSystemState_MemoryRegion::InternalSwap(NativeSystemState_MemoryRegion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.start_, other->_impl_.start_);
}

std::string NativeSystemState_MemoryRegion::GetTypeName() const {
  return "NativeSystemState.MemoryRegion";
}


// ===================================================================

class NativeSystemState::_Internal {
 public:
  static const ::NativeSystemState_Registers& registers(const NativeSystemState* msg);
};

const ::NativeSystemState_Registers&
NativeSystemState::_Internal::registers(const NativeSystemState* msg) {
  return *msg->_impl_.registers_;
}
NativeSystemState::NativeSystemState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NativeSystemState)
}
NativeSystemState::NativeSystemState(const NativeSystemState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NativeSystemState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memoryregions_){from._impl_.memoryregions_}
    , decltype(_impl_.registers_){nullptr}
    , decltype(_impl_.model_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_registers()) {
    _this->_impl_.registers_ = new ::NativeSystemState_Registers(*from._impl_.registers_);
  }
  _this->_impl_.model_ = from._impl_.model_;
  // @@protoc_insertion_point(copy_constructor:NativeSystemState)
}

inline void NativeSystemState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memoryregions_){arena}
    , decltype(_impl_.registers_){nullptr}
    , decltype(_impl_.model_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NativeSystemState::~NativeSystemState() {
  // @@protoc_insertion_point(destructor:NativeSystemState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NativeSystemState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.memoryregions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.registers_;
}

void NativeSystemState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NativeSystemState::Clear() {
// @@protoc_insertion_point(message_clear_start:NativeSystemState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memoryregions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.registers_ != nullptr) {
    delete _impl_.registers_;
  }
  _impl_.registers_ = nullptr;
  _impl_.model_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* NativeSystemState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Trs80Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model(static_cast<::Trs80Model>(val));
        } else
          goto handle_unusual;
        continue;
      // .NativeSystemState.Registers registers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_registers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .NativeSystemState.MemoryRegion memoryRegions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memoryregions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NativeSystemState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NativeSystemState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Trs80Model model = 1;
  if (this->_internal_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_model(), target);
  }

  // .NativeSystemState.Registers registers = 2;
  if (this->_internal_has_registers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::registers(this),
        _Internal::registers(this).GetCachedSize(), target, stream);
  }

  // repeated .NativeSystemState.MemoryRegion memoryRegions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_memoryregions_size()); i < n; i++) {
    const auto& repfield = this->_internal_memoryregions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NativeSystemState)
  return target;
}

size_t NativeSystemState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NativeSystemState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NativeSystemState.MemoryRegion memoryRegions = 3;
  total_size += 1UL * this->_internal_memoryregions_size();
  for (const auto& msg : this->_impl_.memoryregions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NativeSystemState.Registers registers = 2;
  if (this->_internal_has_registers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registers_);
  }

  // .Trs80Model model = 1;
  if (this->_internal_model() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_model());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NativeSystemState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NativeSystemState*>(
      &from));
}

void NativeSystemState::MergeFrom(const NativeSystemState& from) {
  NativeSystemState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:NativeSystemState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.memoryregions_.MergeFrom(from._impl_.memoryregions_);
  if (from._internal_has_registers()) {
    _this->_internal_mutable_registers()->::NativeSystemState_Registers::MergeFrom(
        from._internal_registers());
  }
  if (from._internal_model() != 0) {
    _this->_internal_set_model(from._internal_model());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NativeSystemState::CopyFrom(const NativeSystemState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NativeSystemState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeSystemState::IsInitialized() const {
  return true;
}

void NativeSystemState::InternalSwap(NativeSystemState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.memoryregions_.InternalSwap(&other->_impl_.memoryregions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NativeSystemState, _impl_.model_)
      + sizeof(NativeSystemState::_impl_.model_)
      - PROTOBUF_FIELD_OFFSET(NativeSystemState, _impl_.registers_)>(
          reinterpret_cast<char*>(&_impl_.registers_),
          reinterpret_cast<char*>(&other->_impl_.registers_));
}

std::string NativeSystemState::GetTypeName() const {
  return "NativeSystemState";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NativeSystemState_Registers*
Arena::CreateMaybeMessage< ::NativeSystemState_Registers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NativeSystemState_Registers >(arena);
}
template<> PROTOBUF_NOINLINE ::NativeSystemState_MemoryRegion*
Arena::CreateMaybeMessage< ::NativeSystemState_MemoryRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NativeSystemState_MemoryRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::NativeSystemState*
Arena::CreateMaybeMessage< ::NativeSystemState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NativeSystemState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
